   public int longest(String s, String t){
	   // assume s or t is not null or empty string
	   // use DP
	   int[][] longest = new int[s.length() + 1][t.length() + 1]; 
        
	   for(int i = 1; i <= s.length(); i++){
		   for( int j = 1; j <= t.length(); j++){
			   if( s.charAt(i-1) == t.charAt(j-1)){// index i-1 j -1? 
				   longest[i][j] = longest[i-1][j-1] + 1;
			   }
			   else{
				   longest[i][j] = Math.max(longest[i-1][j], longest[i][j-1]);
			   }
			  
		   }
	   }
	   return longest[s.length()][t.length()];
   }


	public int longest(String s, String t){
		if( s == null || t == null){
			return 0;
		}
		
		return longestHelper(s.toCharArray(), 0, t.toCharArray(), 0);
	}
	
	public int longestHelper(char[] arrayS, int i, char[] arrayT, int j){
		/*what if we can know the relationship between ith item of arrayS and jth of arrayT */
		if( i == arrayS.length || j == arrayT.length){
			return 0; // when one string arrives at end
		}
		if(arrayS[i] == arrayT[j]){
			return 1 + longestHelper(arrayS, i + 1, arrayT, j + 1);
		}else{
			return Math.max(longestHelper(arrayS, i + 1, arrayT,j), longestHelper(arrayT, i, arrayT, j + 1));
		}
	}
